/**
 * @param {character[][]} board
 * @return {void} Do not return anything, modify board in-place instead.
 */
let end = false;
let board = [["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]];
// let board = [[".", ".", "9", "7", "4", "8", ".", ".", "."], ["7", ".", ".", ".", ".", ".", ".", ".", "."], [".", "2", ".", "1", ".", "9", ".", ".", "."], [".", ".", "7", ".", ".", ".", "2", "4", "."], [".", "6", "4", ".", "1", ".", "5", "9", "."], [".", "9", "8", ".", ".", ".", "3", ".", "."], [".", ".", ".", "8", ".", "3", ".", "2", "."], [".", ".", ".", ".", ".", ".", ".", ".", "6"], [".", ".", ".", "2", "7", "5", "9", ".", "."]];
var solveSudoku = function () {
    test(board);
};

var test=function (board){
    for (let i = 0; i < 9; i++) {
        for (let j = 0; j < 9; j++) {
            if (board[i][j] == '.') {
                label:
                    for (let k = 1; k < 10; k++) {
                        let isValid = true;
                        for (let m = 0; m < 9; m++) {
                            if (board[m][j] == k.toString(10).charAt(0) || board[i][m] == k.toString(10).charAt(0)) {
                                isValid = false;
                                continue label;
                            }
                        }
                        for (let m = Math.floor(i / 3) * 3; m < Math.floor(i / 3) * 3 + 3; m++) {
                            for (let n = Math.floor(j / 3) * 3; n < Math.floor(j / 3) * 3 + 3; n++) {
                                if (board[m][n] == k.toString(10).charAt(0)) {
                                    isValid = false;
                                    continue label;
                                }
                            }
                        }

                        if (isValid) {
                            board[i][j] = k.toString(10).charAt(0);
                            if (i == 8 && j == 8) {
                                end = true;
                                return;
                            }
                            solveSudoku(board);
                            if (!end) {
                                board[i][j] = '.';
                                continue;
                            }

                            return;
                        }
                    }
                board[i][j] = '.';
                return;
            }
            if (i == 8 && j == 8) {
                end = true;
                return;
            }
        }
    }
}

solveSudoku();
console.log(board)

// console.log(solveSudoku([["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]))